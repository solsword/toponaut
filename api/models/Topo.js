/**
 * Topo.js
 *
 * @description :: A topo is the most basic unit of Toponaut. It stores
 *   multiple layers of grid-based information about topology, and may include
 *   links to other topos. The topo actually exists as an intermediate
 *   representation unit though: when encountered by a player, a topo is
 *   instanced into a panel (see api/models/Panel.js) which includes
 *   information about the specific encounter, such as absolute boundary
 *   coordinates and encounter orientation. Additionally, topos may be
 *   generated by 'ographies (see api/models/Ography.js), which act as a
 *   grammar for topos.
 * @docs        :: http://sailsjs.org/documentation/concepts/models-and-orm/models
 */

// Not loaded fast enough otherwise
var uuid = require('uuid');

module.exports = {
  autoPK: false,
  schema: true,

  attributes: {
    id: {
      type: "string",
      size: 36,
      required: true,
      unique: true,
      primaryKey: true,
      defaultsTo: function() {
        return uuid.v4();
      },
    },
    size: {
      type: "integer",
      enum: [4, 8, 16, 32],
      defaultsTo: 16,
    },
    tiles: {
      type: "array",
    },
    plants: {
      type: "array",
    },
    refs: {
      type: "array",
      // TODO: Scrub ref.topo upon saving!
    },

    // Relationships:
    world: {
      model: "world",
    },
    generated_by: {
      model: "ography",
    },
    cannonical_parent: {
      model: "topo",
    },
    cannonical_children: {
      collection: "topo",
      via: "cannonical_parent",
    },

    // Overrides:
    toJSON: function() {
      var result = Object.create(null);
      for (var attr in Topo.attributes) {
        if (this[attr] instanceof Function) { continue; }
        if (!this.hasOwnProperty(attr)) {
          console.error(Error("Record is missing attribute '" + attr + "'."));
        }
        result[attr] = this[attr];
        if (result[attr]) {
          if (Topo.attributes[attr].hasOwnProperty("model")) {
            if (result[attr].hasOwnProperty("id")) {
              result[attr] = result[attr].id;
            }
          } else if (Topo.attributes[attr].hasOwnProperty("collection")) {
            var newlist = [];
            for (var val of result[attr]) {
              if (val.hasOwnProperty("id")) {
                newlist.push(val.id);
              } else {
                newlist.push(val);
              }
            }
            result[attr] = newlist;
          }
        }
      }
      var newrefs = [];
      for (var ref of result.refs) {
        var nr = Utils.copy_obj(ref);
        delete nr.topo;
        newrefs.push(nr);
      }
      result.refs = newrefs;
      return result;
    },
  }
};

